#https://leetcode.com/problems/partition-to-k-equal-sum-subsets/
class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        total_sum = sum(nums)
        target_sum = total_sum // k
        if total_sum % k != 0:
            return False

        def backtrack(start, subset_sum, subsets):
            if subsets == 0:
                return True
            if subset_sum == target_sum:
                return backtrack(0, 0, subsets-1)
            for i in range(start, len(nums)):
                if subset_sum + nums[i] > target_sum:
                    continue
                if not used[i]:
                    used[i] = True
                    if backtrack(i+1, subset_sum+nums[i], subsets):
                        return True
                    used[i] = False
            return False

        nums.sort(reverse=True)
        used = [False] * len(nums)
        return backtrack(0, 0, k)
