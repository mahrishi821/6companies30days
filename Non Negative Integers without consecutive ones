#https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/
class Solution:
    def findIntegers(self, num: int) -> int:
        # Convert num to binary and remove the '0b' prefix
        num = bin(num)[2:]
        n = len(num)
        
        # Create arrays to store the number of non-consecutive 1s and consecutive 1s
        non_consecutive = [0] * (n + 1)
        consecutive = [0] * (n + 1)
        non_consecutive[0] = 1
        consecutive[0] = 1
        
        for i in range(1, n + 1):
            # If the current bit is 0, we can add the number of non-consecutive 1s
            if num[i-1] == '0':
                non_consecutive[i] = non_consecutive[i-1] + consecutive[i-1]
            # If the current bit is 1, we can add the number of consecutive 1s
            else:
                non_consecutive[i] = non_consecutive[i-1]
                consecutive[i] = non_consecutive[i-1] + consecutive[i-1]
        
        return non_consecutive[n] + consecutive[n] - (num[-1] == '1')
